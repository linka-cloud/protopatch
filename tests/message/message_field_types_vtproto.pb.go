// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: tests/message/message_field_types.proto

package message

import (
	binary "encoding/binary"
	fmt "fmt"
	protohelpers "github.com/planetscale/vtprotobuf/protohelpers"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	math "math"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *MessageWithCustomTypes) CloneVT() *MessageWithCustomTypes {
	if m == nil {
		return (*MessageWithCustomTypes)(nil)
	}
	r := new(MessageWithCustomTypes)
	r.StringField = String(string(m.StringField))
	r.Int32Field = Int32(int32(m.Int32Field))
	r.Int64Field = Int64(int64(m.Int64Field))
	r.FloatField = Float(float32(m.FloatField))
	r.DoubleField = Double(float64(m.DoubleField))
	r.Uint32Field = Uint32(uint32(m.Uint32Field))
	r.Uint64Field = Uint64(uint64(m.Uint64Field))
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MessageWithCustomTypes) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MessageWithOptionalCustomTypes) CloneVT() *MessageWithOptionalCustomTypes {
	if m == nil {
		return (*MessageWithOptionalCustomTypes)(nil)
	}
	r := new(MessageWithOptionalCustomTypes)
	if rhs := (*string)(m.StringField); rhs != nil {
		tmpVal := *rhs
		r.StringField = (*String)(&tmpVal)
	}
	if rhs := (*int32)(m.Int32Field); rhs != nil {
		tmpVal := *rhs
		r.Int32Field = (*Int32)(&tmpVal)
	}
	if rhs := (*int64)(m.Int64Field); rhs != nil {
		tmpVal := *rhs
		r.Int64Field = (*Int64)(&tmpVal)
	}
	if rhs := (*float32)(m.FloatField); rhs != nil {
		tmpVal := *rhs
		r.FloatField = (*Float)(&tmpVal)
	}
	if rhs := (*float64)(m.DoubleField); rhs != nil {
		tmpVal := *rhs
		r.DoubleField = (*Double)(&tmpVal)
	}
	if rhs := (*uint32)(m.Uint32Field); rhs != nil {
		tmpVal := *rhs
		r.Uint32Field = (*Uint32)(&tmpVal)
	}
	if rhs := (*uint64)(m.Uint64Field); rhs != nil {
		tmpVal := *rhs
		r.Uint64Field = (*Uint64)(&tmpVal)
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MessageWithOptionalCustomTypes) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MessageWithOneOfCustomType) CloneVT() *MessageWithOneOfCustomType {
	if m == nil {
		return (*MessageWithOneOfCustomType)(nil)
	}
	r := new(MessageWithOneOfCustomType)
	if m.OneOf != nil {
		r.OneOf = m.OneOf.(interface {
			CloneVT() isMessageWithOneOfCustomType_OneOf
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MessageWithOneOfCustomType) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MessageWithOneOfCustomType_StringField) CloneVT() isMessageWithOneOfCustomType_OneOf {
	if m == nil {
		return (*MessageWithOneOfCustomType_StringField)(nil)
	}
	r := new(MessageWithOneOfCustomType_StringField)
	r.StringField = String(string(m.StringField))
	return r
}

func (m *MessageWithOneOfCustomType_Int64Field) CloneVT() isMessageWithOneOfCustomType_OneOf {
	if m == nil {
		return (*MessageWithOneOfCustomType_Int64Field)(nil)
	}
	r := new(MessageWithOneOfCustomType_Int64Field)
	r.Int64Field = Int64(int64(m.Int64Field))
	return r
}

func (m *MessageWithCustomRepeatedType) CloneVT() *MessageWithCustomRepeatedType {
	if m == nil {
		return (*MessageWithCustomRepeatedType)(nil)
	}
	r := new(MessageWithCustomRepeatedType)
	if rhs := (m.RepeatedStringField); rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.RepeatedStringField = Strings(tmpContainer)
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MessageWithCustomRepeatedType) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *MessageWithCustomTypes) EqualVT(that *MessageWithCustomTypes) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if string(this.StringField) != string(that.StringField) {
		return false
	}
	if int32(this.Int32Field) != int32(that.Int32Field) {
		return false
	}
	if int64(this.Int64Field) != int64(that.Int64Field) {
		return false
	}
	if float32(this.FloatField) != float32(that.FloatField) {
		return false
	}
	if float64(this.DoubleField) != float64(that.DoubleField) {
		return false
	}
	if uint32(this.Uint32Field) != uint32(that.Uint32Field) {
		return false
	}
	if uint64(this.Uint64Field) != uint64(that.Uint64Field) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MessageWithCustomTypes) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MessageWithCustomTypes)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MessageWithOptionalCustomTypes) EqualVT(that *MessageWithOptionalCustomTypes) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if p, q := (*string)(this.StringField), (*string)(that.StringField); (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := (*int32)(this.Int32Field), (*int32)(that.Int32Field); (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := (*int64)(this.Int64Field), (*int64)(that.Int64Field); (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := (*float32)(this.FloatField), (*float32)(that.FloatField); (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := (*float64)(this.DoubleField), (*float64)(that.DoubleField); (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := (*uint32)(this.Uint32Field), (*uint32)(that.Uint32Field); (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := (*uint64)(this.Uint64Field), (*uint64)(that.Uint64Field); (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MessageWithOptionalCustomTypes) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MessageWithOptionalCustomTypes)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MessageWithOneOfCustomType) EqualVT(that *MessageWithOneOfCustomType) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.OneOf == nil && that.OneOf != nil {
		return false
	} else if this.OneOf != nil {
		if that.OneOf == nil {
			return false
		}
		if !this.OneOf.(interface {
			EqualVT(isMessageWithOneOfCustomType_OneOf) bool
		}).EqualVT(that.OneOf) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MessageWithOneOfCustomType) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MessageWithOneOfCustomType)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MessageWithOneOfCustomType_StringField) EqualVT(thatIface isMessageWithOneOfCustomType_OneOf) bool {
	that, ok := thatIface.(*MessageWithOneOfCustomType_StringField)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if string(this.StringField) != string(that.StringField) {
		return false
	}
	return true
}

func (this *MessageWithOneOfCustomType_Int64Field) EqualVT(thatIface isMessageWithOneOfCustomType_OneOf) bool {
	that, ok := thatIface.(*MessageWithOneOfCustomType_Int64Field)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if int64(this.Int64Field) != int64(that.Int64Field) {
		return false
	}
	return true
}

func (this *MessageWithCustomRepeatedType) EqualVT(that *MessageWithCustomRepeatedType) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len((this.RepeatedStringField)) != len((that.RepeatedStringField)) {
		return false
	}
	for i, vx := range this.RepeatedStringField {
		vy := that.RepeatedStringField[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MessageWithCustomRepeatedType) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MessageWithCustomRepeatedType)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (m *MessageWithCustomTypes) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageWithCustomTypes) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageWithCustomTypes) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if uint64(m.Uint64Field) != 0 {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(uint64(m.Uint64Field)))
		i--
		dAtA[i] = 0x38
	}
	if uint32(m.Uint32Field) != 0 {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(uint32(m.Uint32Field)))
		i--
		dAtA[i] = 0x30
	}
	if float64(m.DoubleField) != 0 {
		i -= 8
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(float64(m.DoubleField)))))
		i--
		dAtA[i] = 0x29
	}
	if float32(m.FloatField) != 0 {
		i -= 4
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(float32(m.FloatField)))))
		i--
		dAtA[i] = 0x25
	}
	if int64(m.Int64Field) != 0 {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(int64(m.Int64Field)))
		i--
		dAtA[i] = 0x18
	}
	if int32(m.Int32Field) != 0 {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(int32(m.Int32Field)))
		i--
		dAtA[i] = 0x10
	}
	if len(string(m.StringField)) > 0 {
		i -= len(string(m.StringField))
		copy(dAtA[i:], string(m.StringField))
		i = protohelpers.EncodeVarint(dAtA, i, uint64(len(string(m.StringField))))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageWithOptionalCustomTypes) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageWithOptionalCustomTypes) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageWithOptionalCustomTypes) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if (*uint64)(m.Uint64Field) != nil {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(uint64(*m.Uint64Field)))
		i--
		dAtA[i] = 0x38
	}
	if (*uint32)(m.Uint32Field) != nil {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(uint32(*m.Uint32Field)))
		i--
		dAtA[i] = 0x30
	}
	if (*float64)(m.DoubleField) != nil {
		i -= 8
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(float64(*m.DoubleField)))))
		i--
		dAtA[i] = 0x29
	}
	if (*float32)(m.FloatField) != nil {
		i -= 4
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(float32(*m.FloatField)))))
		i--
		dAtA[i] = 0x25
	}
	if (*int64)(m.Int64Field) != nil {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(int64(*m.Int64Field)))
		i--
		dAtA[i] = 0x18
	}
	if (*int32)(m.Int32Field) != nil {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(int32(*m.Int32Field)))
		i--
		dAtA[i] = 0x10
	}
	if (*string)(m.StringField) != nil {
		i -= len(string(*m.StringField))
		copy(dAtA[i:], string(*m.StringField))
		i = protohelpers.EncodeVarint(dAtA, i, uint64(len(string(*m.StringField))))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageWithOneOfCustomType) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageWithOneOfCustomType) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageWithOneOfCustomType) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.OneOf.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *MessageWithOneOfCustomType_StringField) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageWithOneOfCustomType_StringField) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(string(m.StringField))
	copy(dAtA[i:], string(m.StringField))
	i = protohelpers.EncodeVarint(dAtA, i, uint64(len(string(m.StringField))))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *MessageWithOneOfCustomType_Int64Field) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageWithOneOfCustomType_Int64Field) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = protohelpers.EncodeVarint(dAtA, i, uint64(int64(m.Int64Field)))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *MessageWithCustomRepeatedType) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageWithCustomRepeatedType) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageWithCustomRepeatedType) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len((m.RepeatedStringField)) > 0 {
		for iNdEx := len((m.RepeatedStringField)) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RepeatedStringField[iNdEx])
			copy(dAtA[i:], m.RepeatedStringField[iNdEx])
			i = protohelpers.EncodeVarint(dAtA, i, uint64(len(m.RepeatedStringField[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessageWithCustomTypes) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(string(m.StringField))
	if l > 0 {
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	if int32(m.Int32Field) != 0 {
		n += 1 + protohelpers.SizeOfVarint(uint64(int32(m.Int32Field)))
	}
	if int64(m.Int64Field) != 0 {
		n += 1 + protohelpers.SizeOfVarint(uint64(int64(m.Int64Field)))
	}
	if float32(m.FloatField) != 0 {
		n += 5
	}
	if float64(m.DoubleField) != 0 {
		n += 9
	}
	if uint32(m.Uint32Field) != 0 {
		n += 1 + protohelpers.SizeOfVarint(uint64(uint32(m.Uint32Field)))
	}
	if uint64(m.Uint64Field) != 0 {
		n += 1 + protohelpers.SizeOfVarint(uint64(uint64(m.Uint64Field)))
	}
	n += len(m.unknownFields)
	return n
}

func (m *MessageWithOptionalCustomTypes) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if (*string)(m.StringField) != nil {
		l = len(string(*m.StringField))
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	if (*int32)(m.Int32Field) != nil {
		n += 1 + protohelpers.SizeOfVarint(uint64(int32(*m.Int32Field)))
	}
	if (*int64)(m.Int64Field) != nil {
		n += 1 + protohelpers.SizeOfVarint(uint64(int64(*m.Int64Field)))
	}
	if (*float32)(m.FloatField) != nil {
		n += 5
	}
	if (*float64)(m.DoubleField) != nil {
		n += 9
	}
	if (*uint32)(m.Uint32Field) != nil {
		n += 1 + protohelpers.SizeOfVarint(uint64(uint32(*m.Uint32Field)))
	}
	if (*uint64)(m.Uint64Field) != nil {
		n += 1 + protohelpers.SizeOfVarint(uint64(uint64(*m.Uint64Field)))
	}
	n += len(m.unknownFields)
	return n
}

func (m *MessageWithOneOfCustomType) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.OneOf.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *MessageWithOneOfCustomType_StringField) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(string(m.StringField))
	n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	return n
}
func (m *MessageWithOneOfCustomType_Int64Field) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + protohelpers.SizeOfVarint(uint64(int64(m.Int64Field)))
	return n
}
func (m *MessageWithCustomRepeatedType) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len((m.RepeatedStringField)) > 0 {
		for _, s := range m.RepeatedStringField {
			l = len(s)
			n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *MessageWithCustomTypes) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protohelpers.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageWithCustomTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageWithCustomTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringField = String(string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Field", wireType)
			}
			m.Int32Field = Int32(0)
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32Field |= Int32(int32(b&0x7F) << shift)
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Field", wireType)
			}
			m.Int64Field = Int64(0)
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64Field |= Int64(int64(b&0x7F) << shift)
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatField", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FloatField = Float(float32(math.Float32frombits(v)))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleField", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoubleField = Double(float64(math.Float64frombits(v)))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Field", wireType)
			}
			m.Uint32Field = Uint32(0)
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32Field |= Uint32(uint32(b&0x7F) << shift)
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Field", wireType)
			}
			m.Uint64Field = Uint64(0)
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64Field |= Uint64(uint64(b&0x7F) << shift)
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protohelpers.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protohelpers.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageWithOptionalCustomTypes) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protohelpers.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageWithOptionalCustomTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageWithOptionalCustomTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StringField = (*String)(&s)
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Field", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Int32Field = (*Int32)(&v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Field", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Int64Field = (*Int64)(&v)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatField", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.FloatField = (*Float)(&v2)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleField", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.DoubleField = (*Double)(&v2)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Field", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uint32Field = (*Uint32)(&v)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Field", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uint64Field = (*Uint64)(&v)
		default:
			iNdEx = preIndex
			skippy, err := protohelpers.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protohelpers.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageWithOneOfCustomType) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protohelpers.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageWithOneOfCustomType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageWithOneOfCustomType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOf = &MessageWithOneOfCustomType_StringField{StringField: String(string(dAtA[iNdEx:postIndex]))}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Field", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneOf = &MessageWithOneOfCustomType_Int64Field{Int64Field: Int64(v)}
		default:
			iNdEx = preIndex
			skippy, err := protohelpers.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protohelpers.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageWithCustomRepeatedType) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protohelpers.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageWithCustomRepeatedType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageWithCustomRepeatedType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedStringField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedStringField = Strings(append((m.RepeatedStringField), string(dAtA[iNdEx:postIndex])))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protohelpers.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protohelpers.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
